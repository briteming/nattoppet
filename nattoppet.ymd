[require]=
const {args: [file]} = nattoppet_parse()
const content = read(file.replace('@nattoppet', nattoppet_dir))
switch (extname(file)) {
    case 'scss':
        `<style>${render_scss(content)}</style>`; break
    case 'css':
        `<style>${content}</style>`; break
    case 'coffee':
        `<script>${render_coffee(content)}</script>`; break
    case 'js':
        `<script>${content}</script>`; break
    case 'md':
        render_markdown(content); break
    default:
        content; break
}

[img]=
const {opts, args: [file, alt]} = nattoppet_parse()
const class = opts.join(' ')
const content = `data:image/${extname(file)};base64,` + read(file, 'base64')
const alttext = alt ? `alt="${alt}"` : ''
;`<img class="${class}" src="${content}" alt="${alttext}"/>`

[h2]= `<h2>${interpret(capture_line())}</h2>`
[h3]= `<h3>${interpret(capture_line())}</h3>`
[h4]= `<h4>${interpret(capture_line())}</h4>`

[quote]=
const {block} = nattoppet_parse(true)
;`<blockquote>${interpret(block)}</blockquote>`

[#]= nattoppet_parse(true), ''

[-]=
const {opts, block} = nattoppet_parse(true)
;`<li class="${opts.join(' ')}">${interpret(block)}</li>`

[file]=
const {args: [file, text]} = nattoppet_parse()
const content = "data:application/octet-stream;base64," + read(file, 'base64')
;`<a download="${basename(file)}" href="${content}">${text ? interpret(text) : basename(file)}</a>`

[code]=
const {opts: [language], args: [content], block} = nattoppet_parse()
const code = `<code ${language ? `class="language-${language}"` : ''}>${content || block}</code>`
content ? code : `<pre>${code}</pre>`
